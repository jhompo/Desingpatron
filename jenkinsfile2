pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Clonar el código desde el repositorio GitHub
                git url: 'https://github.com/usuario/repo.git', branch: 'main'
            }
        }

        stage('Build') {
            steps {
                // Construir el proyecto (ajustar el comando si usas otra herramienta que no sea Maven)
                sh 'mvn clean install'
            }
        }

        stage('Test') {
            steps {
                // Ejecutar las pruebas
                sh 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    // Ejecutar el análisis de SonarQube
                    // Reemplace 'sonar.projectKey' con la clave de su proyecto
                    sh """
                    sonar-scanner \
                      -Dsonar.projectKey=mi-proyecto \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=http://localhost:9000 \
                      -Dsonar.login=your-sonarqube-token
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                // Espera el resultado del análisis y revisa el Quality Gate
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        always {
            // Limpieza al finalizar el pipeline, independientemente del resultado
            cleanWs()
        }

        failure {
            // Notificación en caso de fallo (puedes integrar notificaciones por correo, Slack, etc.)
            echo 'El pipeline falló.'
        }

        success {
            // Notificación en caso de éxito
            echo 'El pipeline se completó con éxito.'
        }
    }
}


pipeline {
    agent any 

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/jhompo/Desingpatron.git'
            }
        }
        stage('Build') {
            steps {
                script {
                    sh 'mkdir -p bin'
                    sh 'javac -d bin -sourcepath src src/Main.java src/Option.java src/patrones/Feature.java'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    // Configura las propiedades de SonarQube aquí
                    withSonarQubeEnv('SonarQube') { // Reemplaza 'SonarQube' con tu nombre de configuración de SonarQube
                        sh 'sonar-scanner -Dsonar.projectKey=my_project -Dsonar.sources=src -Dsonar.java.binaries=bin'
                    }
                }
            }
        }
    }
}